(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{212:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"node-js基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js基础知识"}},[t._v("#")]),t._v(" Node.js基础知识")]),t._v(" "),s("p",[s("a",{attrs:{name:"Mff2E"}})]),t._v(" "),s("h2",{attrs:{id:"node-js控制台命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js控制台命令"}},[t._v("#")]),t._v(" Node.js控制台命令")]),t._v(" "),s("p",[t._v("在Node.js中，使用console对象代表控制台（在操作系统中的表现形式为一个操作系统中指定的字符界面，例如，在Win-dows操作系统中为一个命令提示窗口）。在Node.js中，可以通过console对象的各种方法向控制台中进行标准输出流与标准错误输出流的输出。\n"),s("a",{attrs:{name:"bjxHE"}})]),t._v(" "),s("h3",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.log")]),t._v(" "),s("td",[t._v("用于进行标准输出流的输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.error")]),t._v(" "),s("td",[t._v("用于进行标准错误输出流的输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.dir")]),t._v(" "),s("td",[t._v("用于查看一个对象中的内容并且将该对象的信息输出到控制台中。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.time与Endtime")]),t._v(" "),s("td",[t._v("当需要统计一段代码的执行时间时，可以使用console.time方法与console.timeEnd方法，其中con-sole.time方法用于标记开始时间，console.timeEnd方法用于标记结束时间，并且将结束时间与开始时间之间经过的毫秒数在控制台中输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.trace")]),t._v(" "),s("td",[t._v("用于将当前位置处的栈信息作为标准错误信息进行输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("console.asset")]),t._v(" "),s("td",[t._v("用于对一个表达式的执行结果进行评估，如果该表达式的执行结果为false，则输出一个消息字符串并抛出AssertionError异常。")])])])]),t._v(" "),s("p",[s("a",{attrs:{name:"vVYp7"}})]),t._v(" "),s("h2",{attrs:{id:"node-js中的全局作用域及全局函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js中的全局作用域及全局函数"}},[t._v("#")]),t._v(" Node.js中的全局作用域及全局函数")]),t._v(" "),s("p",[s("a",{attrs:{name:"ntOql"}})]),t._v(" "),s("h3",{attrs:{id:"定时器函数介绍、调用与取消调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定时器函数介绍、调用与取消调用"}},[t._v("#")]),t._v(" 定时器函数介绍、调用与取消调用")]),t._v(" "),s("ul",[s("li",[t._v("setTimeout函数与clearTimeout函数")]),t._v(" "),s("li",[t._v("setInterval函数与clearInterval函数")]),t._v(" "),s("li",[t._v("定时器对象的unref方法与ref方法")])]),t._v(" "),s("p",[t._v("怎么使用相信学过Js的人都会使用，主要介绍调用和取消调用"),s("br"),t._v("unref用于取消定时器对象回调函数的调用，ref则用于恢复调用。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" testTimer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntestTimer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unref")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里取消了定时器调用")]),t._v("\n\ntestTimer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恢复调用")]),t._v("\n\n\n\n")])])]),s("p",[s("a",{attrs:{name:"dywwh"}})]),t._v(" "),s("h2",{attrs:{id:"与模块相关的函数和变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与模块相关的函数和变量"}},[t._v("#")]),t._v(" 与模块相关的函数和变量")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("require: 引用模块")])]),t._v(" "),s("li",[s("p",[t._v("require.resolve：  获取完整的模块路径")])]),t._v(" "),s("li",[s("p",[t._v("require.cache：  获取缓存中的模块")])]),t._v(" "),s("li",[s("p",[t._v("__filename变量： 获取当前模块的文件名称")])]),t._v(" "),s("li",[s("p",[t._v("__dirname变量：获取当前模块的目录名称")])]),t._v(" "),s("li",[s("p",[t._v("exports")])]),t._v(" "),s("li",[s("p",[t._v("module.exports")])])]),t._v(" "),s("p"),t._v(" "),s("p",[s("a",{attrs:{name:"fBwbU"}})]),t._v(" "),s("h2",{attrs:{id:"事件与事件环机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件与事件环机制"}},[t._v("#")]),t._v(" 事件与事件环机制")]),t._v(" "),s("p",[t._v("Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。"),s("br"),t._v("Node.js 几乎每一个 API 都是支持回调函数的。"),s("br"),t._v("Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。"),s("br"),t._v("Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.")]),t._v(" "),s("p",[t._v("在Node.js的用于实现各种事件处理的event模块中，定义了一个EventEmitter类。所有可能触发事件的对象都是一个继承了EventEmitter类的子类的实例对象，在Node.js中，为Even-tEmitter类定义了许多方法，所有与对象的事件处理函数的绑定及解除相关的处理均依靠这些方法的调用来执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/424641/1583593395295-620ff24b-451e-4dbd-800d-9ac9c4d80f68.jpeg#align=left&display=inline&height=345&name=node01.jpg&originHeight=345&originWidth=1024&size=67136&status=done&style=none&width=1024",alt:"node01.jpg"}}),t._v(" "),s("a",{attrs:{name:"a9mkX"}})]),t._v(" "),s("h3",{attrs:{id:"eventemitter类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter类"}},[t._v("#")]),t._v(" EventEmitter类")]),t._v(" "),s("p",[t._v("在Node.js的用于实现各种事件处理的event模块中，定义了一个EventEmitter类。所有可能触发事件的对象都是一个继承了EventEmitter类的子类的实例对象，在Node.js中，为Even-tEmitter类定义了许多方法，所有与对象的事件处理函数的绑定及解除相关的处理均依靠这些方法的调用来执行。这些方法见表3-1（表中的event代表事件名，listener代表事件处理函数，中括号内的参数代表该参数为可选参数）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/jpeg/424641/1584111643581-d3aea4f8-998c-4678-a7a7-7a1ea0581394.jpeg#align=left&display=inline&height=345&name=node_event.jpg&originHeight=345&originWidth=1024&size=67136&status=done&style=none&width=1024",alt:"node_event.jpg"}})])])}],!1,null,null,null);e.default=n.exports}}]);