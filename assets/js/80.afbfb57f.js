(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{248:function(n,t,s){"use strict";s.r(t);var e=s(0),p=Object(e.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"gulp自动化构建工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gulp自动化构建工具"}},[n._v("#")]),n._v(" gulp自动化构建工具")]),n._v(" "),s("h2",{attrs:{id:"为什么要使用gulp自动化构建工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用gulp自动化构建工具"}},[n._v("#")]),n._v(" 为什么要使用gulp自动化构建工具")]),n._v(" "),s("p",[n._v("构建工具能够自动执行我们前端常见的前端任务，可以合并、压缩、加密、编译文件等，能提高生产力。\n目前比较流行的构建工具有gulp和grunt，看了这两个工具，觉得gulp比较好，因为gulp语法比较简单明了，而且执行效率比grunt高，所以就用gulp了。")]),n._v(" "),s("h2",{attrs:{id:"配置环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置环境"}},[n._v("#")]),n._v(" 配置环境")]),n._v(" "),s("p",[n._v("gulp是基于node实现的，那么我们就需要先安装 node。\nhttp://nodejs.cn/\n打开网址点击下载安装，下载好node就可以安装我们需要的gulp工具\n检查node是否安装和版本 打开cmd输入")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("node -v\n")])])]),s("p",[n._v("如果有版本显示，说明安装成功，接下来可以使用npm命令安装gulp")]),n._v(" "),s("h2",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[n._v("#")]),n._v(" 安装")]),n._v(" "),s("p",[n._v("注：安装完node后，请使用node.js command prompt命令行来操作npm gulp 等命令。因为不使用node.js无法检测和使用安装gulp等,记住，一切基于node.js。")]),n._v(" "),s("p",[n._v("Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("全局安装\nnpm install -g gulp  \n本地安装\nnpm install --save-dev gulp\n")])])]),s("h2",{attrs:{id:"gulp的配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gulp的配置文件"}},[n._v("#")]),n._v(" Gulp的配置文件")]),n._v(" "),s("p",[n._v("项目根目录中的gulpfile.js，是Gulp的配置文件。\n下面就是一个简单配置的gulpfile.js文件。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//引入gulp\nvar gulp = require('gulp');\n//声明引入js压缩插件\nvar uglify = require('gulp-uglify');\n\ngulp.task('script', function () {\n//找到需要压缩的js路径\n  gulp.src('js/app.js')\n  //执行方法\n    .pipe(uglify())\n    //创建路径\n    .pipe(gulp.dest('build'))\n});\n")])])]),s("h2",{attrs:{id:"除了安装gulp以外，不同的任务还需要安装不同的gulp插件模块。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#除了安装gulp以外，不同的任务还需要安装不同的gulp插件模块。"}},[n._v("#")]),n._v(" 除了安装gulp以外，不同的任务还需要安装不同的gulp插件模块。")]),n._v(" "),s("h3",{attrs:{id:"gulp常见插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gulp常见插件"}},[n._v("#")]),n._v(" gulp常见插件")]),n._v(" "),s("p",[n._v("下面就是我们项目常见的插件")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("本地安装\nnpm install -save-dev gulp-uglify\n\ngulp-uglify: 压缩js\ngulp-imagemin: 压缩图片\ngulp-ruby-sass: 支持sass\ngulp-minify-css: 压缩css\ngulp-concat-css : 合并css\ngulp-jshint: 检查js\ngulp-uglify: 压缩js\ngulp-concat: 合并文件\ngulp-rename: 重命名文件\ngulp-htmlmin: 压缩html\ngulp-clean: 清空文件夹\ngulp-uncss-task ：删除没用css\ngulp-html-replace :html替换合并后的js css\n")])])]),s("h2",{attrs:{id:"执行script任务时，就在项目目录中执行下面命令就可以了。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行script任务时，就在项目目录中执行下面命令就可以了。"}},[n._v("#")]),n._v(" 执行script任务时，就在项目目录中执行下面命令就可以了。")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" gulp script   //script 是自己定义的模块名\n\n")])])]),s("h2",{attrs:{id:"完整的配置文档（用于参考）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整的配置文档（用于参考）"}},[n._v("#")]),n._v(" 完整的配置文档（用于参考）")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/*\n参考代码网址：\nhttp://www.ido321.com/1622.html           \nhttp://colobu.com/2014/11/17/gulp-plugins-introduction/#gulp-rename            \nhttps://github.com/nimojs/gulp-book  \n */\n// 获取 gulp\nvar gulp = require('gulp'),\n    // js 压缩插件 （用于压缩 JS）\n    uglify = require('gulp-uglify'),\n    // 压缩css插件(cssnano将取代gulp-minify-css)\n    minifyCSS = require('gulp-minify-css'),\n    cssnano = require('gulp-cssnano'),\n    // 获取 gulp-imagemin 模块\n    imagemin = require('gulp-imagemin'),\n    // 重命名 插件\n    rename = require('gulp-rename'),\n    // 压缩html插件\n    htmlmin = require('gulp-htmlmin'),\n    // 合并文件\n    concat = require(\"gulp-concat\"),\n    // html 文件对合并文件后的替换处理插件\n    htmlReplace = require(\"gulp-html-replace\"),\n    // 复制文件（文件拷贝）\n    copy = require('copy'),\n    // 清除文件\n    del = require('del');\n\n// 版本号\nvar APP_VERSION = 'v.1.0';\n\n// 压缩 js 文件\n// 在命令行使用 gulp script 启动此任务\ngulp.task('script', function() {\n    // 1. 找到文件\n    gulp.src('js/*.js')\n    // 2. 压缩文件\n        .pipe(uglify())\n    // new: 压缩前修改压缩后新文件名字\n        .pipe(rename( function(path){\n          path.basename += \"_\" + APP_VERSION; \n        } ) )\n    // 3. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n});\n\n// 压缩 css 文件\n// 在命令行使用 gulp css 启动此任务\ngulp.task('css', function () {\n    // 1. 找到文件\n    gulp.src('css/*.css')\n    // 2. 压缩文件\n        .pipe(minifyCSS())\n    // 3. 另存为压缩文件\n        .pipe(gulp.dest('dist/css'))\n});\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('images/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n    // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 合并js 任务(合并压缩成功后的 js文件)\ngulp.task('concat', function () {\n    gulp.src('dist/js/*.js')  //要合并的文件\n    .pipe( concat('all.js') )  // 合并匹配到的js文件并命名为 \"all.js\"\n    .pipe( gulp.dest('dist/js') );\n});\n\n// 解决 gulp 合并文件后， html调用代码对应替换\ngulp.task('htmlreplace', function(){\n  gulp.src('canvas_test.html')\n      .pipe( htmlReplace({'js': 'js/all.js'}) )\n      .pipe( gulp.dest('dist/') );\n});\n// 压缩html 任务\ngulp.task('htmlmin', function () {\n    var options = {\n        collapseWhitespace: true,//压缩HTML\n        //省略布尔属性的值 <input checked=\"true\"/> ==> <input />\n        collapseBooleanAttributes: false,\n        //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n        removeEmptyAttributes: true,\n        //删除<script>的type=\"text/javascript\"\n        removeScriptTypeAttributes: true,\n        //删除<style>和<link>的type=\"text/css\"\n        removeStyleLinkTypeAttributes: true,\n        minifyJS: true,//压缩页面JS\n        minifyCSS: true//压缩页面CSS\n    };\n    gulp.src('*.html')\n        .pipe(htmlmin(options))\n        .pipe(gulp.dest('dist'));\n});\n\n// 清除文件任务\ngulp.task('clean', function(cb){\n   del(['dist/*']);\n   cb();\n});\n\n// 复制任务(连续复制多个文件时，最好加上回调函数)\ngulp.task('copy', function(cb){\n    copy(['copy_file2.txt', 'copy_file.txt'], 'dist/');\n    cb();\n});\n\n\n/*************************************************************\n *                         组合任务      \n ************************************************************/\n\n// js 压缩合并任务\ngulp.task('ugconjs', function(){\n    // 1. 找到文件\n    gulp.src(['js/concat_base.js', 'js/uglify_utils.js'])\n    // 2. 压缩文件\n        .pipe(uglify())\n    // 3. 合并成一个文件\n        .pipe( concat('all.js') )\n    // 4. 改名\n        .pipe(rename( function(path){\n          path.basename += \"_\" + APP_VERSION; \n        } ) )\n    // 5. 另存压缩后的文件\n        .pipe(gulp.dest('dist/js'))\n});\n\n// 组合任务： 先替换html再压缩\ngulp.task('htmlcomp', function(){\n  var options = {\n    collapseWhitespace: true,//压缩HTML\n    //省略布尔属性的值 <input checked=\"true\"/> ==> <input />\n    collapseBooleanAttributes: false,\n    //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n    removeEmptyAttributes: true,\n    //删除<script>的type=\"text/javascript\"\n    removeScriptTypeAttributes: true,\n    //删除<style>和<link>的type=\"text/css\"\n    removeStyleLinkTypeAttributes: true,\n    minifyJS: true,//压缩页面JS\n    minifyCSS: true//压缩页面CSS\n  };\n  gulp.src('canvas_test.html')\n      .pipe( htmlReplace({'js': 'js/all_' + APP_VERSION + '.js'}) )\n      .pipe( htmlmin(options) )\n      .pipe( gulp.dest('dist/') );\n});\n\n// 默认任务\ngulp.task('default', ['clean'], function(){\n    gulp.start('ugconjs', 'htmlcomp', 'copy', 'css', 'images');\n});\n\n/*************************************************************\n *               本地js  html css本地压缩      \n ************************************************************/\n// 字符串拷贝进 js/str.js 中, 然后运行 `gulp str-js`\ngulp.task('str-js', function() {\n    gulp.src('js/str.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('dist/js'));\n});\n// 字符串拷贝进 css/str.css 中, 然后运行 `gulp str-css`\ngulp.task('str-css', function () {\n    gulp.src('css/str.css')\n        .pipe(cssnano())\n        .pipe(gulp.dest('dist/css'));\n});\n// 字符串拷贝进 str.html 中, 然后运行 `gulp str-html`\ngulp.task('str-html', function () {\n    var options = {\n        collapseWhitespace: true,//压缩HTML\n        //省略布尔属性的值 <input checked=\"true\"/> ==> <input />\n        collapseBooleanAttributes: false,\n        //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n        removeEmptyAttributes: true,\n        //删除<script>的type=\"text/javascript\"\n        removeScriptTypeAttributes: true,\n        //删除<style>和<link>的type=\"text/css\"\n        removeStyleLinkTypeAttributes: true,\n        minifyJS: true,//压缩页面JS\n        minifyCSS: true//压缩页面CSS\n    };\n    gulp.src('str.html')\n        .pipe(htmlmin(options))\n        .pipe(gulp.dest('dist'));\n});\n")])])]),s("h2",{attrs:{id:"专门用于删除的模块插件（rimraf）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#专门用于删除的模块插件（rimraf）"}},[n._v("#")]),n._v(" 专门用于删除的模块插件（rimraf）")]),n._v(" "),s("p",[n._v("因为插件是安装在项目里的，有时项目目录变了，或者想删除这些插件，就需要使用rimraf来卸载掉，单独的手动删除文件是删不掉的。\n1、安装：npm install -g rimraf（全局安装）\n2、使用：先定位目标文件夹的父级目录，然后命令行输入rimraf ***（***为需要删除的文件夹名称）")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("rimeaf node_modules\n")])])]),s("p",[s("strong",[n._v("参考文档")])]),n._v(" "),s("blockquote",[s("p",[n._v("https://github.com/nimojs/gulp-book/blob/master/chapter2.md\nhttp://www.ido321.com/1622.html\nhttps://zhuanlan.zhihu.com/p/20309820http://www.cnblogs.com/2050/p/4198792.html")])])])}],!1,null,null,null);t.default=p.exports}}]);