(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{193:function(t,n,e){"use strict";e.r(n);var a=e(0),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("p",[t._v("集合是一组无序但彼此之间又有一定相关性的成员构成的，每个成员在集合中只能出现一次。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/debingfeng/javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("资源参考与完善:https://github.com/debingfeng/javascript"),e("OutboundLink")],1)]),t._v(" "),t._m(5)])}),[function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"javascript数据结构之集合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript数据结构之集合"}},[this._v("#")]),this._v(" JavaScript数据结构之集合")])},function(){var t=this.$createElement,n=this._self._c||t;return n("pre",[n("code",[this._v("- 不包含任何成员的空集，全集则是包含一切的成员的集合。\n- 如果两个集合的成员完全相同，则称为两个集合相等\n- 如果一个集合中所有的成员都属于另外一个集合则称前一集和为另一集合的子集\n")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"集合操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合操作"}},[this._v("#")]),this._v(" 集合操作")])},function(){var t=this.$createElement,n=this._self._c||t;return n("ul",[n("li",[this._v("并集")]),this._v(" "),n("li",[this._v("交集")]),this._v(" "),n("li",[this._v("补集")]),this._v(" "),n("li",[this._v("子集")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"js实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js实现"}},[this._v("#")]),this._v(" JS实现")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('/**\n * 集合类JavaScript描述\n * @constructor\n */\nfunction Set() {\n\n    this.dataStore = [];\n    \n    this.add = add;\n    \n    this.remove = remove;\n    \n    this.size = size;\n    \n    this.union = union;\n    \n    this.intersect = intersect;\n    \n    this.subset = subset;\n    \n    this.difference = difference;\n    \n    this.show = show;\n    \n    this.has = has;\n\n}\n/**\n * 添加元素\n * @param data\n * @returns {boolean}\n */\nfunction add(data) {\n\tif (this.dataStore.indexOf(data) < 0) {\n\t\tthis.dataStore.push(data);\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n/**\n * 移除数据\n * @param data\n * @returns {boolean}\n */\nfunction remove(data) {\n\tvar index = this.dataStore.indexOf(data);\n\tif (index > -1) {\n\t\tthis.dataStore.splice(index,1);\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n/**\n * 获取集合所有数据\n * @returns {Array}\n */\nfunction show() {\n\treturn this.dataStore;\n}\n/**\n * 检测是否含有某元素\n * @param data\n * @returns {boolean}\n */\nfunction has(data) {\n\treturn this.dataStore.indexOf(data) >= 0;\n}\n/**\n * 获取元素的长度\n * @returns {Number}\n */\nfunction size() {\n\treturn this.dataStore.length;\n}\n\n/**\n * 并集\n * @param set\n * @returns {Set}\n */\nfunction union(set) {\n\tvar tempSet = new Set();\n\tvar i = 0,\n\t\tl = this.dataStore.length;\n\tfor (; i < l; i++) {\n\t\ttempSet.add(this.dataStore[i]);\n\t}\n\n\tvar j = 0,\n\t\tol = set.dataStore.length;\n\tfor ( ; j < ol; j++) {\n\t\tif (!(tempSet.has(set.dataStore[j]))) {\n\t\t\ttempSet.dataStore.push(set.dataStore[j]);\n\t\t}\n\t}\n\n\treturn tempSet;\n}\n//当一个元素属于一个集合，同时也属于另一个集合时，则把该元素加入到一个新集合。\n/**\n * 交集\n * @param set\n * @returns {Set}\n */\nfunction intersect(set) {\n\tvar tempSet = new Set();\n\tvar i = 0,\n\t\tl = this.dataStore.length;\n\tfor (; i < l; i++) {\n\t\tif (set.has(this.dataStore[i])) {\n\t\t\ttempSet.add(this.dataStore[i]);\n\t\t}\n\t}\n\treturn tempSet;\n}\n// 首先判断这个集合的长度是否大于待比较的集合，如果大于则不可能是他的子集，进而判断该集合的元素是否有不存在待比较的集合中，如果有则说明不是他的子集。\n/**\n * 子集\n * @param set\n * @returns {Set}\n */\nfunction subset(set) {\n\tif(this.size() > set.size()) {\n\t\treturn false;\n\t}\n\tvar i = 0,\n\t\tl = this.dataStore.length;\n\tfor (; i < l; i++) {\n\t\tif (!set.has(this.dataStore[i])) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * 补集\n * @param set\n * @returns {Set}\n */\nfunction difference(set) {\n\tvar tempSet = new Set();\n\tvar i = 0,\n\t\tl = this.dataStore.length;\n\tfor (; i < l; i++) {\n\t\tif (!(set.has(this.dataStore[i]))) {\n\t\t\ttempSet.add(this.dataStore[i]);\n\t\t}\n\t}\n\treturn tempSet;\n}\n\nvar a = new Set();\na.add("a");\na.add("b");\nvar b = new Set();\nb.add("b");\nb.add("c");\nconsole.log(a.union(b).show());\nconsole.log(a.difference(b).show());\nconsole.log(a.intersect(b).show());\n')])])])}],!1,null,null,null);n.default=r.exports}}]);