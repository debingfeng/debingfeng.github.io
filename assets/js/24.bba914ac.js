(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{192:function(t,n,a){"use strict";a.r(n);var e=a(0),s=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"javascript数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript数据结构"}},[t._v("#")]),t._v(" JavaScript数据结构")]),t._v(" "),a("p",[t._v("最近在回顾一些基础知识，在目前枝繁叶茂的前端中把基础知识弄扎实。基础扎实了上层建筑才能牢固。这是一些笔记，虽然是一些简单的东西，但还是拿出来与大家分享一下。养成一种分享的习惯。")]),t._v(" "),a("h2",{attrs:{id:"列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),a("p",[t._v("列表是一组有序的数据。每个列表中的数据项称为元素。在JavaScript中，列表中的元素可以是任意数据类型。")]),t._v(" "),a("h3",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),a("p",[t._v("当列表中保存的元素不多时；不需要很长的序列中查找元素；不需要对齐进行排序。")]),t._v(" "),a("p",[t._v("如果数据结构非常复杂，列表的作用就没那么大了。例如人们经常使用的待办事项列表、购物清单、流行榜单等就很合适使用。")]),t._v(" "),a("h3",{attrs:{id:"实现简单的列表类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现简单的列表类"}},[t._v("#")]),t._v(" 实现简单的列表类")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/**\n * List\n * @constructor\n */\nfunction List() {\n\n    // 初始化数据\n    this.data = [];\n    // 添加\n    this.add = function (item){};\n    // 删除\n    this.remove = function (id){};\n    // 查找\n    this.find = function (id){};\n    // 清空\n    this.clear = function () {};\n    // 获取列表数据\n    this.getData = function (){};\n\n}\n\nvar ins = new List();\n\n")])])]),a("h2",{attrs:{id:"栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),a("p",[t._v("栈是一种特殊的列表，栈内的元素只能通过一端访问，这一端称为栈顶。栈是后入先出的数据结构。")]),t._v(" "),a("p",[t._v("由于栈具有后入先出的特点，所以任何不在栈顶的元素都无法访问。为了得到栈顶的元素，必须先去掉上面的元素。")]),t._v(" "),a("h3",{attrs:{id:"栈的js实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈的js实现"}},[t._v("#")]),t._v(" 栈的JS实现")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Stack() {\n    this.dataStore = [];\n    this.top = 0; //栈顶\n    this.push = push; // 入栈\n    this.pop = pop; // 出栈并删除\n    this.peek = peek; // 出栈单不删除\n    this.clear = clear;\n    this.getLength = getLength;\n}\n\nfunction push(el) {\n    this.dataStore[this.top++] = el;\n}\n\nfunction pop() {\n    return this.dataStore[--this.top];\n}\n\nfunction peek() {\n\treturn this.dataStore[this.top-1];\n}\n\nfunction clear() {\n    this.top = 0;\n}\n\nfunction getLength() {\n    return this.top;\n}\n\nvar ins = new Stack();\nins.push('a');\nins.push('b');\nins.push('c');\n")])])]),a("h3",{attrs:{id:"举2个栈实际应用的栗子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举2个栈实际应用的栗子"}},[t._v("#")]),t._v(" 举2个栈实际应用的栗子")]),t._v(" "),a("ul",[a("li",[t._v("数制间的相互转换")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function mulBase(num, base) {\n    var s = new Stack();\n    do {\n    \ts.push(num % base);\n    \tnum = Math.floor(num /= base);\n    } while (num > 0);\n    var converted = "";\n    while (s.getLength() > 0) {\n    \tconverted += s.pop();\n    }\n    return converted;\n}\nconsole.log(mulBase(25,2));// 11001\n')])])]),a("ul",[a("li",[t._v("回文判断")])]),t._v(" "),a("p",[t._v("回文：一个单词、短语或者数字，从前往后写都是一样的。例如 abba 倒过来还是abba")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function isPalindrome(word) {\n    var stack = new Stack(),\n    \ti = 0,\n        l = word.length;\n    for (; i < l; i++) {\n    \tstack.push(word.charAt(i))\n    }\n    var rword = "";\n    while (stack.getLength() > 0) {\n    \trword += stack.pop();\n    }\n    return rword === word;\n}\nconsole.log(isPalindrome("rar")) //true\nconsole.log(isPalindrome("test"))//false\n')])])]),a("h2",{attrs:{id:"队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),a("p",[t._v("队列是一种列表，不同的是队列只能在队尾插入元素，在对首删除元素。队列用于存储按顺序排列的数据，先进先出。队列应用比较广泛，提交操作系统执行一些进程，打印任务池，日常排队买东西等等。")]),t._v(" "),a("h2",{attrs:{id:"队列的js实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列的js实现"}},[t._v("#")]),t._v(" 队列的JS实现")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Queue() {\n    this.dataStore = [];\n    this.enqueue = enqueue;\n    this.dequeue = dequeue;\n    this.front = front;\n    this.back = back;\n    this.toString = toString;\n    this.empty = empty;\n}\nfunction enqueue(element) {\n    this.dataStore.push(element)\n}\nfunction dequeue() {\n\tthis.dataStore.shift()\n}\nfunction front() {\n    return this.dataStore[0];\n}\nfunction back() {\n\treturn this.dataStore[this.dataStore.length - 1];\n}\nfunction toString() {\n\tvar str = '',\n        i = 0,\n        l = this.dataStore.length;\n\tfor ( ; i < l; i++) {\n\t\tstr += this.dataStore[i] + \"\\n\";\n    }\n\treturn str;\n}\nfunction empty() {\n    return this.dataStore.length === 0;\n}\n// 实例化\nvar q = new Queue();\nq..enqueue('a');\n\n")])])])])}],!1,null,null,null);n.default=s.exports}}]);