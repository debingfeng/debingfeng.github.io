(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{188:function(n,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"设计模式在javascript中的应用实践（一）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计模式在javascript中的应用实践（一）"}},[n._v("#")]),n._v(" 设计模式在JavaScript中的应用实践（一）")]),n._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#对象字面量"}},[n._v("对象字面量")])]),e("li",[e("a",{attrs:{href:"#模块模式"}},[n._v("模块模式")]),e("ul",[e("li",[e("a",{attrs:{href:"#模拟-私有方法、属性"}},[n._v("模拟 私有方法、属性")])]),e("li",[e("a",{attrs:{href:"#引入引出的问题"}},[n._v("引入引出的问题")])]),e("li",[e("a",{attrs:{href:"#工具包和特定框架的module模式实现"}},[n._v("工具包和特定框架的Module模式实现")])])])]),e("li",[e("a",{attrs:{href:"#揭示模块模式"}},[n._v("揭示模块模式")])]),e("li",[e("a",{attrs:{href:"#单例模式"}},[n._v("单例模式")])]),e("li",[e("a",{attrs:{href:"#观察者模式、发布订阅模式"}},[n._v("观察者模式、发布订阅模式")])])])]),e("p"),n._v(" "),e("h2",{attrs:{id:"对象字面量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象字面量"}},[n._v("#")]),n._v(" 对象字面量")]),n._v(" "),e("p",[n._v("使用对象字面量，对象字面量不需要使用new运算符进行实例化，但不能用在一个语句的开头，因为开始的可能被解读为一个块的开始。")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("应用场景")]),n._v(" "),e("ul",[e("li",[n._v("组织简单的模块")]),n._v(" "),e("li",[n._v("定义常用的数据存储容器")])])])]),n._v(" "),e("p",[e("strong",[n._v("代码示例")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var myObjectLiteral = {\n    variableKey: variableValue,\n    functionKey: function () {}\n};\n")])])]),e("h2",{attrs:{id:"模块模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块模式"}},[n._v("#")]),n._v(" 模块模式")]),n._v(" "),e("p",[n._v("Module模式最初被定义为一种在传统软件工程中为类提供私有和公有封装的方法。")]),n._v(" "),e("ul",[e("li",[n._v("应用场景")])]),n._v(" "),e("h3",{attrs:{id:"模拟-私有方法、属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模拟-私有方法、属性"}},[n._v("#")]),n._v(" 模拟 私有方法、属性")]),n._v(" "),e("p",[n._v("Module模式使用闭包封装“私有”状态和组织。它提供了一种包装混合公有/私有方法和变量的方式，防止其泄露至全局作用域，并与别的开发人员的接口发生冲突。通过该模式，只需返回一个公有API，而其他的一切则都维持在私有闭包里。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var myNamespace = (function () {\n    // 私有计数器变量\n    var myPrivateVar = 0;\n    // 记录所有参数的私有函数\n    var myPrivateMethod = function (foo) {\n        console.log(foo);\n    };\n    return {\n        // 公有变量  \n        myPublicVar: "foo",\n        // 调用私有变量和方法的公有函数  \n        myPublicFunction: function (bar) {\n            // 增加私有计数器值  \n            myPrivateVar++;\n            // 传入bar 调用私有方法  \n            myPrivateMethod(bar);\n        }\n    };\n})();\n')])])]),e("h3",{attrs:{id:"引入引出的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入引出的问题"}},[n._v("#")]),n._v(" 引入引出的问题")]),n._v(" "),e("ul",[e("li",[n._v("引入")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 全局模块\nvar myModule = (function (jQ, _) {\nfunction privateMethod1() {\n    jQ(".container").html("test");\n}\n\nfunction privateMethod2() {\n    console.log(_.min([10, 5, 100, 2, 1000]));\n}\nreturn {\n    publicMethod: function () {\n        privateMethod1();\n    }\n}; // 引入jQuery 和Underscore\n})(jQuery, _));\nmyModule.publicMethod();\n')])])]),e("ul",[e("li",[n._v("引出扩展")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 全局模块\nvar myModule = (function () {\n    // 模块对象\n    var module = {},\n        privateVariable = "Hello World";\n\n    function privateMethod() {\n        // ...\n    }\n    module.publicProperty = "Foobar";\n    module.publicMethod = function () {\n        console.log(privateVariable);\n    };\n    return module;\n})();\n')])])]),e("h3",{attrs:{id:"工具包和特定框架的module模式实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具包和特定框架的module模式实现"}},[n._v("#")]),n._v(" 工具包和特定框架的Module模式实现")]),n._v(" "),e("p",[n._v("命名空间")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var store = window.store || {};\nif (!store["basket"]) {\n    store.basket = {};\n}\nif (!store.basket["core"]) {\n    store.basket.core = {};\n}\nstore.basket.core = {\n    // ...剩余的逻辑\n};\n')])])]),e("h2",{attrs:{id:"揭示模块模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#揭示模块模式"}},[n._v("#")]),n._v(" 揭示模块模式")]),n._v(" "),e("ul",[e("li",[n._v("优点")])]),n._v(" "),e("p",[n._v("该模式可以使脚本语法更加一致。在模块代码底部，它也会很容易指出哪些函数和变量可以被公开访问，从而改善可读性。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var myRevealingModule = function () {\n    var privateCounter = 0;\n\n    function privateFunction() {\n        privateCounter++;\n    }\n\n    function publicFunction() {\n        publicIncrement();\n    }\n\n    function publicIncrement() {\n        privateFunction();\n    }\n\n    function publicGetCount() {\n            return privateCounter;\n        } // 将暴露的公有指针指向到私有函数和属性上\n    return {\n        start: publicFunction,\n        increment: publicIncrement,\n        count: publicGetCount\n    };\n}();\nmyRevealingModule.start();\n")])])]),e("h2",{attrs:{id:"单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[n._v("#")]),n._v(" 单例模式")]),n._v(" "),e("p",[n._v("Singleton（单例）模式被熟知的原因是因为它限制了类的实例化次数只能一次。")]),n._v(" "),e("ul",[e("li",[n._v("应用场景")])]),n._v(" "),e("p",[n._v("单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器的window对象。在js开发中，单例模式的用途同样非常广泛。试想一下，当我们")]),n._v(" "),e("p",[n._v("单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次。因此这个登录浮窗就适合用单例模式。")]),n._v(" "),e("p",[n._v("总结一下它的使用场景：")]),n._v(" "),e("pre",[e("code",[n._v("1、可以用它来划分命名空间\n\n2、借助单例模式，可以把代码组织的更为一致，方便阅读与维护\n")])]),n._v(" "),e("p",[e("strong",[n._v("代码示例")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('var mySingleton = (function () {\n    // 实例保持了Singleton 的一个引用    \n    var instance;\n\n    function init() {\n        // Singleton       \n        // 私有方法和变量       \n        function privateMethod() {\n            console.log("I am private");\n        }\n        var privateVariable = "Im also private";\n        var privateRandomNumber = Math.random();\n        return {\n            // 公有方法和变量          \n            publicMethod: function () {\n                console.log("The public can see me!");\n            }, publicProperty: "I am also public",\n            getRandomNumber: function () {\n                return privateRandomNumber;\n            }\n        };\n    };\n    return {\n        // 获取Singleton 的实例，如果存在就返回，不存在就创建新实例   \n        getInstance: function () {\n            if (!instance) {\n                instance = init();\n            }\n            return instance;\n        }\n    };\n})();\n')])])]),e("h2",{attrs:{id:"观察者模式、发布订阅模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式、发布订阅模式"}},[n._v("#")]),n._v(" 观察者模式、发布订阅模式")]),n._v(" "),e("ul",[e("li",[n._v("概念\n一个或多个观察者对目标的状态感兴趣，它们通过将自己依附在目标对象上以便注册所感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣，就会发送一个通知消息，调用每个观察者的更新方法。当观察者不再对目标状态感兴趣时，它们可以简单地将自己从中分离。")]),n._v(" "),e("li",[n._v("应用场景：")])]),n._v(" "),e("p",[n._v("给不同依赖的模块解耦")]),n._v(" "),e("p",[e("strong",[n._v("代码示例")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var pubsub = {};   // 定义发布者\n\n(function (q) {\n\n    var list = [],  //回调函数存放的数组，也就是记录有多少人订阅了我们东西\n        subUid = -1;\n\n    // 发布消息,遍历订阅者\n    q.publish = function (type, content) {\n        // type 为文章类型，content为文章内容\n        \n        // 如果没有人订阅，直接返回\n        if (!list[type]) {\n\n            return false;\n        }\n\n        setTimeout(function () {\n            var subscribers = list[type],\n                len = subscribers ? subscribers.length : 0;\n\n            while (len--) {\n                // 将内容注入到订阅者那里\n                subscribers[len].func(type, content);\n            }\n        }, 0);\n\n        return true;\n\n    };\n    //订阅方法，由订阅者来执行\n    q.subscribe = function (type, func) {\n        // 如果之前没有订阅过\n        if (!list[type]) {\n            list[type] = [];\n        }\n\n        // token相当于订阅者的id，这样的话如果退订，我们就可以针对它来知道是谁退订了。\n        var token = (++subUid).toString();\n        // 每订阅一个，就把它存入到我们的数组中去\n        list[type].push({\n            token: token,\n            func: func\n        });\n        return token;\n    };\n    //退订方法\n    q.unsubscribe = function (token) {\n        for (var m in list) {\n            if (list[m]) {\n                for (var i = 0, j = list[m].length; i < j; i++) {\n                    if (list[m][i].token === token) {\n                        list[m].splice(i, 1);\n                        return token;\n                    }\n                }\n            }\n        }\n        return false;\n    };\n\n} (pubsub));\n\n//将订阅赋值给一个变量，以便退订\nvar girlA = pubsub.subscribe('js类的文章', function (type, content) {\n    console.log('girlA订阅的'+type + \": 内容内容为：\" + content);\n});\nvar girlB = pubsub.subscribe('js类的文章', function (type, content) {\n    console.log('girlB订阅的'+type + \": 内容内容为：\" + content);\n});\nvar girlC = pubsub.subscribe('js类的文章', function (type, content) {\n    console.log('girlC订阅的'+type + \": 内容内容为：\" + content);\n});\n\n//发布通知\npubsub.publish('js类的文章', '关于js的内容');  \n// 输出：\n// girlC订阅的js类的文章: 内容内容为：关于js的内容\n// test3.html:78 girlB订阅的js类的文章: 内容内容为：关于js的内容\n// test3.html:75 girlA订阅的js类的文章: 内容内容为：关于js的内容\n\n\n//girlA退订了关于js类的文章 \nsetTimeout(function () {\n    pubsub.unsubscribe(girlA);\n}, 0);\n\n//再发布一次，验证一下是否还能够输出信息\npubsub.publish('js类的文章', \"关于js的第二篇文章\");\n// 输出：\n// girlB订阅的js类的文章: 内容内容为：关于js的第二篇文章\n// girlC订阅的js类的文章: 内容内容为：关于js的第二篇文章\n")])])])])}],!1,null,null,null);t.default=r.exports}}]);